generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                String      @id @default(uuid())\n  email             String      @unique\n  passwordHash      String\n  firstName         String\n  lastName          String\n  phoneNumber       String?\n  instrument        String?\n  profilePictureUrl String?\n  createdAt         DateTime    @default(now())\n  updatedAt         DateTime    @updatedAt\n  \n  // Relations\n  createdBands      Band[]      @relation(\"BandCreator\")\n  memberships       BandMember[]\n  createdVenues     Venue[]     @relation(\"VenueCreator\")\n  createdRehearsals Rehearsal[] @relation(\"RehearsalCreator\")\n  attendances       Attendance[]\n  createdSetlists   Setlist[]   @relation(\"SetlistCreator\")\n  createdSongs      Song[]      @relation(\"SongCreator\")\n  comments          Comment[]\n  userSettings      UserSettings?\n  availabilities    Availability[]\n  notifications     Notification[]\n}\n\nmodel Band {\n  id          String      @id @default(uuid())\n  name        String\n  description String?\n  logoUrl     String?\n  createdById String\n  createdAt   DateTime    @default(now())\n  updatedAt   DateTime    @updatedAt\n  \n  // Relations\n  createdBy   User        @relation(\"BandCreator\", fields: [createdById], references: [id])\n  members     BandMember[]\n  rehearsals  Rehearsal[]\n}\n\nmodel BandMember {\n  id        String    @id @default(uuid())\n  bandId    String\n  userId    String\n  role      Role      @default(MEMBER)\n  joinDate  DateTime  @default(now())\n  status    Status    @default(ACTIVE)\n  \n  // Relations\n  band      Band      @relation(fields: [bandId], references: [id])\n  user      User      @relation(fields: [userId], references: [id])\n\n  @@unique([bandId, userId])\n}\n\nmodel Venue {\n  id          String     @id @default(uuid())\n  name        String\n  address     String?\n  city        String?\n  state       String?\n  zipCode     String?\n  contactInfo String?\n  notes       String?\n  createdById String\n  createdAt   DateTime   @default(now())\n  updatedAt   DateTime   @updatedAt\n  \n  // Relations\n  createdBy   User       @relation(\"VenueCreator\", fields: [createdById], references: [id])\n  rehearsals  Rehearsal[]\n}\n\nmodel Rehearsal {\n  id               String      @id @default(uuid())\n  bandId           String\n  title            String\n  description      String?\n  startTime        DateTime\n  endTime          DateTime\n  venueId          String?\n  isRecurring      Boolean     @default(false)\n  recurrencePattern Json?      // JSON data for recurrence pattern\n  createdById      String\n  createdAt        DateTime    @default(now())\n  updatedAt        DateTime    @updatedAt\n  \n  // Relations\n  band             Band        @relation(fields: [bandId], references: [id])\n  venue            Venue?      @relation(fields: [venueId], references: [id])\n  createdBy        User        @relation(\"RehearsalCreator\", fields: [createdById], references: [id])\n  attendances      Attendance[]\n  setlists         Setlist[]\n  comments         Comment[]\n  notifications    Notification[]\n}\n\nmodel Availability {\n  id          String    @id @default(uuid())\n  userId      String\n  dayOfWeek   Int?      // 0-6, null if it's a specific date\n  startTime   DateTime\n  endTime     DateTime\n  isRecurring Boolean   @default(true)\n  specificDate DateTime? // null if recurring weekly\n  \n  // Relations\n  user        User      @relation(fields: [userId], references: [id])\n}\n\nmodel Attendance {\n  id                String          @id @default(uuid())\n  rehearsalId      String\n  userId           String\n  status           AttendanceStatus @default(NO_RESPONSE)\n  responseTime     DateTime?\n  attendanceConfirmed Boolean        @default(false)\n  notes            String?\n  \n  // Relations\n  rehearsal        Rehearsal       @relation(fields: [rehearsalId], references: [id])\n  user             User            @relation(fields: [userId], references: [id])\n\n  @@unique([rehearsalId, userId])\n}\n\nmodel Setlist {\n  id           String        @id @default(uuid())\n  rehearsalId  String\n  title        String\n  description  String?\n  createdById  String\n  createdAt    DateTime      @default(now())\n  updatedAt    DateTime      @updatedAt\n  \n  // Relations\n  rehearsal    Rehearsal     @relation(fields: [rehearsalId], references: [id])\n  createdBy    User          @relation(\"SetlistCreator\", fields: [createdById], references: [id])\n  setlistSongs SetlistSong[]\n}\n\nmodel Song {\n  id          String        @id @default(uuid())\n  title       String\n  artist      String?\n  duration    Int?          // Duration in seconds\n  key         String?\n  notes       String?\n  createdById String\n  createdAt   DateTime      @default(now())\n  updatedAt   DateTime      @updatedAt\n  \n  // Relations\n  createdBy   User          @relation(\"SongCreator\", fields: [createdById], references: [id])\n  setlistSongs SetlistSong[]\n}\n\nmodel SetlistSong {\n  id        String  @id @default(uuid())\n  setlistId String\n  songId    String\n  position  Int\n  notes     String?\n  \n  // Relations\n  setlist   Setlist @relation(fields: [setlistId], references: [id])\n  song      Song    @relation(fields: [songId], references: [id])\n\n  @@unique([setlistId, songId])\n}\n\nmodel Notification {\n  id            String            @id @default(uuid())\n  userId        String\n  rehearsalId   String\n  type          NotificationType\n  status        NotificationStatus @default(PENDING)\n  scheduledTime DateTime\n  sentTime      DateTime?\n  message       String\n  \n  // Relations\n  user          User              @relation(fields: [userId], references: [id])\n  rehearsal     Rehearsal         @relation(fields: [rehearsalId], references: [id])\n}\n\nmodel Comment {\n  id          String   @id @default(uuid())\n  rehearsalId String\n  userId      String\n  content     String\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  \n  // Relations\n  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id])\n  user        User      @relation(fields: [userId], references: [id])\n}\n\nmodel UserSettings {\n  id                   String @id @default(uuid())\n  userId               String @unique\n  notificationPreferences Json   // JSON data for notification preferences\n  calendarIntegration    Json?  // JSON data for calendar integration settings\n  timezone              String\n  themePreference       String @default(\"light\")\n  updatedAt             DateTime @updatedAt\n  \n  // Relations\n  user                 User   @relation(fields: [userId], references: [id])\n}\n\nenum Role {\n  ADMIN\n  MEMBER\n}\n\nenum Status {\n  ACTIVE\n  INACTIVE\n  PENDING\n}\n\nenum AttendanceStatus {\n  ATTENDING\n  NOT_ATTENDING\n  MAYBE\n  NO_RESPONSE\n}\n\nenum NotificationType {\n  REMINDER\n  UPDATE\n  CANCELLATION\n}\n\nenum NotificationStatus {\n  PENDING\n  SENT\n  FAILED\n}